#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: README
#+DATE: <2018-05-21 Mon>
#+AUTHOR: Stanislav Arnaudov
#+EMAIL: arnaud@localhost.localdomain
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)



* Abstract
[[./demo_pic.png]] 
A handy utility that (for now) helps me create my project in a simple manner, without copying and pasting a whole directory of an existing project and then going through the files and replacing the necessary files and file contents with new words. This /python/ scripts automates exactly this process. Custom project-templates can be added as easily as just adding a new project-template folder and specifying the file names that should be changed. Then trough the configuration file everything about the new project-template could setup.  

* Instalation and basic usage
Clone the repo with
#+BEGIN_EXAMPLE
git clone https://github.com/palikar/projector
#+END_EXAMPLE
You will probably have to do something like
#+BEGIN_EXAMPLE
cd projector
chmod +x create_project.py
#+END_EXAMPLE
Then you can run the script like:
#+BEGIN_EXAMPLE
./create_project.py cmake ~/code/
#+END_EXAMPLE
This will create new /cmake/-project and will place the root directory of the project in the folder =~/code= of your system. If you don't like the structure of the setup of any of the templates, feel free to change them. The templates' folders are in the root of the repo and are specified through the =root_dir= property of each generator in the config file.
\\
In any file of the project-template you can use text like ~%property_name%~. The script will go through all the files, find these fields and replace them with the inputs collected on running the script. This also works for file names. The contents of binary files will be skipped but their names can be changed. In the configuration file for each generator a set of such properties is specified. Those tell the script what to expect from the user and which fields to replace in the template upon copying it in the given directory. More on the configuration file in the next section.

* Config file
The file that defines all the projects that can be created is =config.json=. Each top level object name of the json is the name of a new /generator/. The script is invoked by passing such generator as its first argument. ~root_dir~ of a given generator tells the script which is the project-templates folder. This folder will be copied in the given location and traversed and being checked for replacing the specified properties. The ~properties~ field of a generator is an array of property objects. Each object specifies:
- ~name~ - The text with which the user will be prompted to enter a value for the given property.
- ~token~ - The text that will be replaced with the collected value. This happens in the copied template directory. In this step  the directory becomes form a template to the actual generated project. The text here must be given _without_ the percent signs. So, ="token": "author"= means that all of =%author%= in the project template will be replaced with the user's value.
- ~default~ - Optional field. Tells the script what is the default value for this property and if the user provides empty input, this value will be used in the replacing step.
